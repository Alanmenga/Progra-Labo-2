------------------Métodos estáticos------------------
1-¿Qué propone el principio DRY?
El principio Don't repeat yourself (DRY) ("No te repitas", en español)
Toda pieza de conocimiento debe tener una representación única, 
inequívoca y fidedigna dentro de un sistema.

2-¿Qué modificadores podemos aplicar a un método y qué efecto tienen?
Modificador de acceso: Indica y limita desde donde se puede interactuar 
con un método u otros tipos de miembros. Por defecto es private.
public    --> (Accesible desde cualquier parte.)
private   --> Sólo accesible desde dentro del mismo tipo.
internal  --> Sólo accesible desde dentro del mismo ensamblado / proyecto.
protected --> Sólo accesible desde dentro del mismo tipo o tipos derivados (hijos).

3-Enumere y detalle las buenas prácticas a la hora de diseñar un método.


4-¿Qué significa refactorizar?
es una técnica de la ingeniería de software para reestructurar un código fuente, 
alterando su estructura interna sin cambiar su comportamiento externo. 
Esta técnica consiste en modificar el código fuente para mejorar su 
consistencia interna y su claridad.

------------------Namespaces------------------
1-¿Qué es un namespace y cuál es su función principal?
Es una agrupación lógica de clases y otros elementos del código fuente.
Su función principal es la organización del código, permitiendo la reducción 
de conflictos por nombres duplicados y la posibilidad de trabajar en un mismo 
programa con componentes de distinta procedencia.

2-¿Puedo tener distintos namespaces dentro de un mismo proyecto o ensamblado de .NET?
Puede haber más de un namespace por proyecto

3-¿Para qué se usa la directiva using?
La directiva using permite la especificación de una llamada a un método sin 
el uso obligatorio de un nombre completamente cualificado (nombre completo 
incluyendo el espacio de nombres).

4-¿Para qué se usa la directiva alias?
La directiva alias permite utilizar un nombre distinto para un espacio 
de nombres. Se suele utilizar para abreviar nombres largos.

5-¿Puedo declarar dos clases independientes/distintas con el mismo identificador 
dentro del mismo namespace? ¿Y en namespaces distintos?
No puedes declarar dos clases independientes/distintas con el mismo identificador 
dentro del mismo namespace ni en namespaces distintos en C#. 
El identificador de una clase (o cualquier otro tipo) debe ser único 
dentro de un namespace
Si intentas declarar dos clases con el mismo nombre en el mismo namespace o en 
namespaces diferentes, recibirás un error de compilación, ya que C# no permitirá 
una ambigüedad en la resolución de nombres.

------------------Strings------------------
1-¿Es lo mismo declarar una variable como string (en minúscula) o 
como String (con la primera letra en mayúscula)? ¿Por qué?
No es lo mismo en términos de funcionamiento aunque ambos se refieran al mismo 
tipo de dato
string es un alias para el tipo de datos System.String. En otras palabras, 
string y String se refieren al mismo tipo en tiempo de compilación.

2-¿Se puede recorrer un string con un foreach? ¿Por qué?
puedes utilizar un bucle foreach para recorrer un string en C# debido a que 
un string es una colección de caracteres y se comporta como una secuencia que 
implementa IEnumerable<char>. 

3-¿Qué significa que los strings son inmutables? ¿qué sucede en realidad 
cuando usamos métodos u operadores para modificar un string?
Que los strings son inmutables significa que una vez que se crea un objeto 
string, su contenido no puede ser modificado. Cualquier operación que parezca
modificar un string en realidad crea un nuevo string en lugar de modificar 
el original.